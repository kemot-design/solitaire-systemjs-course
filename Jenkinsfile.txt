stage('CI'){
node {
    
	checkout scm

	// we comment is out because we will configure the script repository in Jenkins app
        // git branch: 'jenkins2-course', 
        //    url: 'https://github.com/g0t4/solitaire-systemjs-course'
    
        // pull dependencies from npm
        // on windows use: bat 'npm install'
        sh 'npm install'
    
        // stash code & dependencies to expedite subsequent testing
        // and ensure same code & dependencies are used throughout the pipeline
        // stash is a temporary archive
        stash name: 'everything', 
              excludes: 'test-results/**', 
              includes: '**'
        
        // test with PhantomJS for "fast" "generic" results
        // on windows use: bat 'npm run test-single-run -- --browsers PhantomJS'
        sh 'npm run test-single-run -- --browsers PhantomJS'
        
        // archive karma test results (karma is configured to export junit xml files)
        step([$class: 'JUnitResultArchiver', 
              testResults: 'test-results/**/test-results.xml'])
              
    }
}

node('agent1'){
    
    // demoing a second agent
    sh 'ls'
    sh 'rm -rf *'
    unstash 'everything'
    sh 'ls'
}

stage('Browser Testing'){
    // parallel integration testing
     parallel Chrome: {
       runTests('Chrome')
    }, Mozilla: {
        runTests('Mozilla')
    }
}


def runTests(browser){
    sh 'ls'
    sh 'rm -rf *'
    unstash 'everything'
    sh 'ls'
    
    sh 'npm run test-single-run -- --browsers ${browser}'
    
    // archive karma test results (karma is configured to export junit xml files)
    step([$class: 'JUnitResultArchiver', 
        testResults: 'test-results/**/test-results.xml'])
}
    
def notify(status){
    emailext (
      to: "wesmdemos@gmail.com",
      subject: "${status}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
      body: """<p>${status}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
        <p>Check console output at <a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a></p>""",
    )
}

node{
    notify('Deploy to staging')
}

// input does not need a node allocation
//it is run on a flyweight executor in master - that is an executor for not allocated purposes ike input
// it is like that not to freeze executor while waiting to someone to push a button
// others executors are known as heveweight executors
input 'Is it ok to deploy?'
